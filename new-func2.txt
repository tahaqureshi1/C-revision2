const AR_PLACEHOLDER = 'اختر خيارًا';
  const EN_CANDIDATES = ['Choose an Option','Choose an option','Select an Option','Select','']; // safety

  const isArabic = () => {
    const id = (Liferay.ThemeDisplay.getLanguageId && Liferay.ThemeDisplay.getLanguageId()) || '';
    return id.toLowerCase().startsWith('ar');
  };

  const root = document.getElementById('form-ar') || document;

  const getButtons = () =>
    root.querySelectorAll('.form-group button.form-control-select[role="combobox"], .form-group button[role="combobox"].form-control-select-secondary');

  const ensureOriginalSaved = (group) => {
    const tooltipDiv = group.querySelector('[data-tooltip-align][title]');
    if (tooltipDiv && !tooltipDiv.dataset.origTitle) {
      tooltipDiv.dataset.origTitle = tooltipDiv.getAttribute('title') || '';
    }
    const btn = group.querySelector('button[role="combobox"]');
    if (btn) {
      const textEl = btn.querySelector('.form-control-select-text') || btn;
      if (!textEl.dataset.origText) {
        textEl.dataset.origText = (textEl.textContent || '').trim();
      }
    }
  };

  // --- NEW: translate the disabled "placeholder" option inside the dropdown list
  const translateListbox = (group) => {
    // menus can be rendered next to the button OR portaled elsewhere; match broadly
    const possibleMenus = document.querySelectorAll(
      '.dropdown-menu[role="listbox"], .dropdown-menu' // role may vary by version
    );
    possibleMenus.forEach((menu) => {
      // only touch menus for this field (try to scope by proximity)
      const isNearby = group.contains(menu) || (group.getBoundingClientRect && menu.getBoundingClientRect);
      // find a disabled/placeholder option by common patterns
      const option =
        menu.querySelector('[role="option"][aria-disabled="true"]') ||            // ARIA pattern
        menu.querySelector('.dropdown-item.disabled, .disabled') ||               // Clay class pattern
        menu.querySelector('[data-value=""], [data-option-value=""], [data-ddm-value=""]'); // DDM data attr pattern

      if (!option) return;

      const current = (option.textContent || '').trim();

      if (isArabic()) {
        if (EN_CANDIDATES.includes(current)) {
          option.textContent = AR_PLACEHOLDER;
        }
      } else {
        // restore to English keyword if it looks Arabic
        if (current === AR_PLACEHOLDER) {
          option.textContent = 'Choose an Option';
        }
      }
    });
  };

  const setArabic = (group) => {
    const tooltipDiv = group.querySelector('[data-tooltip-align][title]');
    if (tooltipDiv) tooltipDiv.setAttribute('title', AR_PLACEHOLDER);

    const btn = group.querySelector('button[role="combobox"]');
    if (btn) {
      const textEl = btn.querySelector('.form-control-select-text') || btn;
      const current = (textEl.textContent || '').trim();
      if (EN_CANDIDATES.includes(current) || current === (textEl.dataset.origText || '')) {
        textEl.textContent = AR_PLACEHOLDER;
      }
      // translate the listbox after it opens
      btn.addEventListener('click', () => setTimeout(() => translateListbox(group), 0));
      btn.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' || e.key === ' ' || e.key === 'ArrowDown') {
          setTimeout(() => translateListbox(group), 0);
        }
      });
    }
  };

  const setEnglish = (group) => {
    const tooltipDiv = group.querySelector('[data-tooltip-align][title]');
    if (tooltipDiv && typeof tooltipDiv.dataset.origTitle !== 'undefined') {
      tooltipDiv.setAttribute('title', tooltipDiv.dataset.origTitle);
    }

    const btn = group.querySelector('button[role="combobox"]');
    if (btn) {
      const textEl = btn.querySelector('.form-control-select-text') || btn;
      if ((textEl.textContent || '').trim() === AR_PLACEHOLDER && typeof textEl.dataset.origText !== 'undefined') {
        textEl.textContent = textEl.dataset.origText || 'Choose an Option';
      }
      // ensure menu option goes back as well (in case menu is open)
      translateListbox(group);
    }
  };

  const apply = () => {
    const buttons = getButtons();
    buttons.forEach((btn) => {
      const group = btn.closest('.form-group');
      if (!group) return;
      ensureOriginalSaved(group);
      if (isArabic()) setArabic(group);
      else setEnglish(group);
    });
  };

  // Run now
  apply();

  // Re-run on SPA navigation
  Liferay.on && Liferay.on('endNavigate', apply);

  // Re-run when form/menu re-renders (DDM/Clay)
  const mo = new MutationObserver(() => {
    apply();
    // Also try translating any newly-inserted dropdown menus
    document.querySelectorAll('.form-group').forEach(translateListbox);
  });
  mo.observe(document.body, { childList: true, subtree: true });

  // Cleanup
  fragmentElement.addEventListener('DOMNodeRemoved', function handle(e) {
    if (e.target === fragmentElement) {
      mo.disconnect();
      Liferay.detach && Liferay.detach('endNavigate', apply);
      fragmentElement.removeEventListener('DOMNodeRemoved', handle);
    }
  });